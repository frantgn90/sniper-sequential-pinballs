
PINPLAY_HOME=$(PIN_ROOT)/extras/pinplay/


OPT?=-O2
COMPRESS?=bzip2 # can be 'none', or 'bzip2', or 'gzip'
OBJEXT = o

PINPLAY_INCLUDE_HOME=$(PINPLAY_HOME)/include
PINPLAY_LIB_HOME=$(PINPLAY_HOME)/lib/$(TARGET)
EXT_LIB_HOME=$(PINPLAY_HOME)/lib-ext/$(TARGET)


CXXFLAGS = -D_FILE_OFFSET_BITS=64 -I$(PIN_ROOT)/source/tools/InstLib -I$(PINPLAY_INCLUDE_HOME)

CXXFLAGS += ${WARNINGS} $(DBG) $(OPT) ${DEPENDENCYFLAG} -std=c++11

TOOLNAMES=pintool-no-mpi-logger

TOOLS=${TOOLNAMES:%=$(PINTOOL_PREFIX)%$(PINTOOL_SUFFIX)}


# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TEST_TOOL_ROOTS := ${TOOL_NAMES} 

# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS :=

# This defines a list of tests that should run in the "short" sanity. Tests in this list must also
# appear either in the TEST_TOOL_ROOTS or the TEST_ROOTS list.
# If the entire directory should be tested in sanity, assign TEST_TOOL_ROOTS and TEST_ROOTS to the
# SANITY_SUBSET variable in the tests section below (see example in makefile.rules.tmpl).
SANITY_SUBSET :=

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
TOOL_ROOTS :=

# This defines the static analysis tools which will be run during the the tests. They should not
# be defined in TEST_TOOL_ROOTS. If a test with the same name exists, it should be defined in
# TEST_ROOTS.
# Note: Static analysis tools are in fact executables linked with the Pin Static Analysis Library.
# This library provides a subset of the Pin APIs which allows the tool to perform static analysis
# of an application or dll. Pin itself is not used when this tool runs.
SA_TOOL_ROOTS :=

# This defines all the applications that will be run during the tests.
APP_ROOTS :=

# This defines any additional object files that need to be compiled.
OBJECT_ROOTS :=pinplay-functions.o extrae-control.o mpi-control.o aux-functions.o dyn-swindow.o

# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS :=

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS :=

##############################################################
#
# Build rules
#
##############################################################

# This section contains the build rules for all binaries that have special build rules.
all: myinstall

tools: $(TOOLS)

myinstall:
	$(MAKE) tools
	rm -f *.o
	$(MAKE) TARGET=ia32 tools

	# test
	

%.${OBJEXT}: %.cpp
	$(CXX) ${MYDEFINES} ${COPT} $(CXXFLAGS) $(TOOL_INCLUDES) $(TOOL_CXXFLAGS) $(PIN_CXXFLAGS) ${COMP_OBJ}$@ $<

pintool-no-mpi-logger.so:  pintool-no-mpi-logger.${OBJEXT} $(OBJECT_ROOTS) $(PINPLAY_LIB_HOME)/libpinplay.a $(EXT_LIB_HOME)/libbz2.a $(EXT_LIB_HOME)/libz.a  $(CONTROLLERLIB) 
	$(LINKER)  $(TOOL_LDFLAGS) $(LINK_EXE)$@ $^ $(TOOL_LPATHS)  $(TOOL_LIBS) $(MYLIBS) $(EXTRA_LIBS) $(PIN_LIBS) $(DBG) 
	mkdir -p $(TARGET)
	mv $@  $(TARGET)/
	rm pintool-no-mpi-logger.${OBJEXT}
	rm $(OBJECT_ROOTS)

clean: myclean
myclean:
	-rm -r -f hello32 hello64 *.${OBJEXT} *.out *.d pin.log obj-*  ia32 ia64
